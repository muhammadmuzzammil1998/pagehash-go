package pagehash

import (
	"encoding/json"
	"errors"
	"io/ioutil"
	"net/http"
	"net/url"
)

// PageHash structure to store the object.
type PageHash struct {
	Load   int64  `json:"load"`
	URL    string `json:"url"`
	Hashes []hash `json:"hashes"`
}

type hash struct {
	Algorithm string `json:"algo"`
	Hash      string `json:"hash"`
}

// Get returns hashes generated by PageHash
func Get(path string) (*PageHash, error) {
	resp, err := http.Get("https://pagehash.muzzammil.xyz/?" + url.Values{"url": {path}}.Encode())
	if err != nil {
		return nil, err
	}
	if resp.StatusCode != 200 {
		return nil, errors.New("Page hash is unreachable. Status: " + resp.Status)
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	hash := &PageHash{}
	err = json.Unmarshal(body, hash)
	if err != nil {
		return nil, err
	}
	if len(hash.Hashes) == 0 {
		resp, _ := http.Get(path)
		return nil, errors.New("Unable to generate hashes. Path status: " + resp.Status)
	}
	return hash, nil
}
